[{"title":"cors","url":"/2021/01/05/cors/","content":"# cors\n\n- CORS是一个W3C标准，全称是\"跨域资源共享\"（Cross-origin resource sharing）。\n\n- CORS需要浏览器和服务器同时支持。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。\n\n  对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。\n\n- 实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。\n\n## 简单请求（simple request）\n\n（1) 请求方法是以下三种方法之一：\n\n- HEAD\n- GET\n- POST\n\n（2）HTTP的头信息不超出以下几种字段：\n\n- Accept\n- Accept-Language\n- Content-Language\n- Last-Event-ID\n- Content-Type：只限于三个值`application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain`\n\n### 基本流程\n\n对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个`Origin`字段。\n\n下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个`Origin`字段。\n\n> ```http\n> GET /cors HTTP/1.1\n> Origin: http://api.bob.com\n> Host: api.alice.com\n> Accept-Language: en-US\n> Connection: keep-alive\n> User-Agent: Mozilla/5.0...\n> ```\n\n上面的头信息中，`Origin`字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。\n\n如果`Origin`指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含`Access-Control-Allow-Origin`字段（详见下文），就知道出错了，从而抛出一个错误，被`XMLHttpRequest`的`onerror`回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。\n\n如果`Origin`指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。\n\n> ```http\n> Access-Control-Allow-Origin: http://api.bob.com\n> Access-Control-Allow-Credentials: true\n> Access-Control-Expose-Headers: FooBar\n> Content-Type: text/html; charset=utf-8\n> ```\n\n上面的头信息之中，有三个与CORS请求相关的字段，都以`Access-Control-`开头。\n\n**（1）Access-Control-Allow-Origin**\n\n该字段是必须的。它的值要么是请求时`Origin`字段的值，要么是一个`*`，表示接受任意域名的请求。\n\n**（2）Access-Control-Allow-Credentials**\n\n该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为`true`，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为`true`，如果服务器不要浏览器发送Cookie，删除该字段即可。\n\n**（3）Access-Control-Expose-Headers**\n\n该字段可选。CORS请求时，`XMLHttpRequest`对象的`getResponseHeader()`方法只能拿到6个基本字段：`Cache-Control`、`Content-Language`、`Content-Type`、`Expires`、`Last-Modified`、`Pragma`。如果想拿到其他字段，就必须在`Access-Control-Expose-Headers`里面指定。上面的例子指定，`getResponseHeader('FooBar')`可以返回`FooBar`字段的值。\n\n### withCredentials 属性\n\n面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定`Access-Control-Allow-Credentials`字段。\n\n> ```http\n> Access-Control-Allow-Credentials: true\n> ```\n\n另一方面，开发者必须在AJAX请求中打开`withCredentials`属性。\n\n> ```javascript\n> var xhr = new XMLHttpRequest();\n> xhr.withCredentials = true;\n> ```\n\n否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。\n\n但是，如果省略`withCredentials`设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭`withCredentials`。\n\n> ```javascript\n> xhr.withCredentials = false;\n> ```\n\n需要注意的是，如果要发送Cookie，`Access-Control-Allow-Origin`就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的`document.cookie`也无法读取服务器域名下的Cookie。\n\n\n\n## 非简单请求（not-so-simple request）\n\n非简单请求是那种对服务器有特殊要求的请求，比如请求方法是`PUT`或`DELETE`，或者`Content-Type`字段的类型是`application/json`。\n\n非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为\"预检\"请求（preflight）。\n\n浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的`XMLHttpRequest`请求，否则就报错。\n\n### 预检请求\n\n非简单请求是那种对服务器有特殊要求的请求，比如请求方法是`PUT`或`DELETE`，或者`Content-Type`字段的类型是`application/json`。\n\n非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为\"预检\"请求（preflight）。\n\n浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的`XMLHttpRequest`请求，否则就报错。\n\n\"预检\"请求用的请求方法是`OPTIONS`，表示这个请求是用来询问的。头信息里面，关键字段是`Origin`，表示请求来自哪个源。\n\n除了`Origin`字段，\"预检\"请求的头信息包括两个特殊字段。\n\n**（1）Access-Control-Request-Method**\n\n该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。\n\n**（2）Access-Control-Request-Headers**\n\n该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。\n\n### 预检请求的回应\n\n服务器收到\"预检\"请求以后，检查了`Origin`、`Access-Control-Request-Method`和`Access-Control-Request-Headers`字段以后，确认允许跨源请求，就可以做出回应。\n\n> ```http\n> HTTP/1.1 200 OK\n> Date: Mon, 01 Dec 2008 01:15:39 GMT\n> Server: Apache/2.0.61 (Unix)\n> Access-Control-Allow-Origin: http://api.bob.com\n> Access-Control-Allow-Methods: GET, POST, PUT\n> Access-Control-Allow-Headers: X-Custom-Header\n> Content-Type: text/html; charset=utf-8\n> Content-Encoding: gzip\n> Content-Length: 0\n> Keep-Alive: timeout=2, max=100\n> Connection: Keep-Alive\n> Content-Type: text/plain\n> ```\n\n上面的HTTP回应中，关键的是`Access-Control-Allow-Origin`字段，表示`http://api.bob.com`可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。\n\n> ```http\n> Access-Control-Allow-Origin: *\n> ```\n\n如果服务器否定了\"预检\"请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被`XMLHttpRequest`对象的`onerror`回调函数捕获。控制台会打印出如下的报错信息。\n\n> ```bash\n> XMLHttpRequest cannot load http://api.alice.com.\n> Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n> ```\n\n服务器回应的其他CORS相关字段如下。\n\n> ```http\n> Access-Control-Allow-Methods: GET, POST, PUT\n> Access-Control-Allow-Headers: X-Custom-Header\n> Access-Control-Allow-Credentials: true\n> Access-Control-Max-Age: 1728000\n> ```\n\n**（1）Access-Control-Allow-Methods**\n\n该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求。\n\n**（2）Access-Control-Allow-Headers**\n\n如果浏览器请求包括`Access-Control-Request-Headers`字段，则`Access-Control-Allow-Headers`字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在\"预检\"中请求的字段。\n\n**（3）Access-Control-Allow-Credentials**\n\n该字段与简单请求时的含义相同。\n\n**（4）Access-Control-Max-Age**\n\n该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。\n\n### 浏览器的正常请求和回应\n\n一旦服务器通过了\"预检\"请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个`Origin`头信息字段。服务器的回应，也都会有一个`Access-Control-Allow-Origin`头信息字段。\n\n下面是\"预检\"请求之后，浏览器的正常CORS请求。\n\n> ```http\n> PUT /cors HTTP/1.1\n> Origin: http://api.bob.com\n> Host: api.alice.com\n> X-Custom-Header: value\n> Accept-Language: en-US\n> Connection: keep-alive\n> User-Agent: Mozilla/5.0...\n> ```\n\n上面头信息的`Origin`字段是浏览器自动添加的。\n\n下面是服务器正常的回应。\n\n> ```http\n> Access-Control-Allow-Origin: http://api.bob.com\n> Content-Type: text/html; charset=utf-8\n> ```\n\n上面头信息中，`Access-Control-Allow-Origin`字段是每次回应都必定包含的。\n\n## 与JSONP的比较\n\nCORS与JSONP的使用目的相同，但是比JSONP更强大。\n\nJSONP只支持`GET`请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。"},{"title":"Hello World","url":"/2021/01/04/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]